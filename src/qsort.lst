   1: var a: array [20] of integer;
lineno:1: VAR var
lineno:1: ID a
lineno:1: COLON :
lineno:1: ARRAY array
lineno:1: LBRA [
lineno:1: UNS 20
lineno:1: RBRA ]
lineno:1: OF of
lineno:1: INTEGER integer
lineno:1: SEMI ;
   2: index,num:integer; temp:integer;
lineno:2: ID index
lineno:2: COMMA ,
lineno:2: ID num
lineno:2: COLON :
lineno:2: INTEGER integer
lineno:2: SEMI ;
lineno:2: ID temp
lineno:2: COLON :
lineno:2: INTEGER integer
lineno:2: SEMI ;
   3: procedure qsort(l,h:integer);
lineno:3: PROCEDURE procedure
lineno:3: ID qsort
lineno:3: LPAR (
lineno:3: ID l
lineno:3: COMMA ,
lineno:3: ID h
lineno:3: COLON :
lineno:3: INTEGER integer
lineno:3: RPAR )
lineno:3: SEMI ;
   4: var i,j,t,m:integer;
lineno:4: VAR var
lineno:4: ID i
lineno:4: COMMA ,
lineno:4: ID j
lineno:4: COMMA ,
lineno:4: ID t
lineno:4: COMMA ,
lineno:4: ID m
lineno:4: COLON :
lineno:4: INTEGER integer
lineno:4: SEMI ;
   5: 	procedure swap(var i, j:integer);
lineno:5: PROCEDURE procedure
lineno:5: ID swap
lineno:5: LPAR (
lineno:5: VAR var
lineno:5: ID i
lineno:5: COMMA ,
lineno:5: ID j
lineno:5: COLON :
lineno:5: INTEGER integer
lineno:5: RPAR )
lineno:5: SEMI ;
   6: 	var temp:integer;
lineno:6: VAR var
lineno:6: ID temp
lineno:6: COLON :
lineno:6: INTEGER integer
lineno:6: SEMI ;
   7: 	begin temp:=i;i:=j;j:=temp end;
lineno:7: BEGIN begin
lineno:7: ID temp
lineno:7: ASSIGN :=
lineno:7: ID i
lineno:7: SEMI ;
lineno:7: ID i
lineno:7: ASSIGN :=
lineno:7: ID j
lineno:7: SEMI ;
lineno:7: ID j
lineno:7: ASSIGN :=
lineno:7: ID temp
lineno:7: END end
lineno:7: SEMI ;
   8: 
   9: begin
lineno:9: BEGIN begin
  10: 	i:=l;
lineno:10: ID i
lineno:10: ASSIGN :=
lineno:10: ID l
lineno:10: SEMI ;
  11: 	j:=h;
lineno:11: ID j
lineno:11: ASSIGN :=
lineno:11: ID h
lineno:11: SEMI ;
  12: 	m:=a[(i+j) / 2];
lineno:12: ID m
lineno:12: ASSIGN :=
lineno:12: ID a
lineno:12: LBRA [
lineno:12: LPAR (
lineno:12: ID i
lineno:12: PLUS +
lineno:12: ID j
lineno:12: RPAR )
lineno:12: OVER /
lineno:12: UNS 2
lineno:12: RBRA ]
lineno:12: SEMI ;
  13: 	repeat
lineno:13: REPEAT repeat
  14: 	begin
lineno:14: BEGIN begin
  15: 		if a[i]<m then repeat i:=i+1 until a[i]>=m;
lineno:15: IF if
lineno:15: ID a
lineno:15: LBRA [
lineno:15: ID i
lineno:15: RBRA ]
lineno:15: LST <
lineno:15: ID m
lineno:15: THEN then
lineno:15: REPEAT repeat
lineno:15: ID i
lineno:15: ASSIGN :=
lineno:15: ID i
lineno:15: PLUS +
lineno:15: UNS 1
lineno:15: UNTIL until
lineno:15: ID a
lineno:15: LBRA [
lineno:15: ID i
lineno:15: RBRA ]
lineno:15: GEQ >=
lineno:15: ID m
lineno:15: SEMI ;
  16: 		if m<a[j] then repeat j:=j-1 until m>=a[j];
lineno:16: IF if
lineno:16: ID m
lineno:16: LST <
lineno:16: ID a
lineno:16: LBRA [
lineno:16: ID j
lineno:16: RBRA ]
lineno:16: THEN then
lineno:16: REPEAT repeat
lineno:16: ID j
lineno:16: ASSIGN :=
lineno:16: ID j
lineno:16: MINUS -
lineno:16: UNS 1
lineno:16: UNTIL until
lineno:16: ID m
lineno:16: GEQ >=
lineno:16: ID a
lineno:16: LBRA [
lineno:16: ID j
lineno:16: RBRA ]
lineno:16: SEMI ;
  17: 
  18: 		if i<=j then
lineno:18: IF if
lineno:18: ID i
lineno:18: LEQ <=
lineno:18: ID j
lineno:18: THEN then
  19: 		begin
lineno:19: BEGIN begin
  20: 		swap(a[i],a[j]);
lineno:20: ID swap
lineno:20: LPAR (
lineno:20: ID a
lineno:20: LBRA [
lineno:20: ID i
lineno:20: RBRA ]
lineno:20: COMMA ,
lineno:20: ID a
lineno:20: LBRA [
lineno:20: ID j
lineno:20: RBRA ]
lineno:20: RPAR )
lineno:20: SEMI ;
  21: 		i:=i+1;
lineno:21: ID i
lineno:21: ASSIGN :=
lineno:21: ID i
lineno:21: PLUS +
lineno:21: UNS 1
lineno:21: SEMI ;
  22: 		j:=j-1;
lineno:22: ID j
lineno:22: ASSIGN :=
lineno:22: ID j
lineno:22: MINUS -
lineno:22: UNS 1
lineno:22: SEMI ;
  23: 		end;
lineno:23: END end
lineno:23: SEMI ;
  24: 	end
lineno:24: END end
  25: 	until i>j;
lineno:25: UNTIL until
lineno:25: ID i
lineno:25: GTT >
lineno:25: ID j
lineno:25: SEMI ;
  26: 
  27: 	if j>l then qsort(l,j);
lineno:27: IF if
lineno:27: ID j
lineno:27: GTT >
lineno:27: ID l
lineno:27: THEN then
lineno:27: ID qsort
lineno:27: LPAR (
lineno:27: ID l
lineno:27: COMMA ,
lineno:27: ID j
lineno:27: RPAR )
lineno:27: SEMI ;
  28: 	if i<h then qsort(i,h);
lineno:28: IF if
lineno:28: ID i
lineno:28: LST <
lineno:28: ID h
lineno:28: THEN then
lineno:28: ID qsort
lineno:28: LPAR (
lineno:28: ID i
lineno:28: COMMA ,
lineno:28: ID h
lineno:28: RPAR )
lineno:28: SEMI ;
  29: end;
lineno:29: END end
lineno:29: SEMI ;
  30: 
  31: begin
lineno:31: BEGIN begin
  32: write("please input number(<10): ");
lineno:32: WRITE write
lineno:32: LPAR (
lineno:32: STRING please input number(<10): 
lineno:32: RPAR )
lineno:32: SEMI ;
  33: read(num);
lineno:33: READ read
lineno:33: LPAR (
lineno:33: ID num
lineno:33: RPAR )
lineno:33: SEMI ;
  34: for index:=1 to num do begin 
lineno:34: FOR for
lineno:34: ID index
lineno:34: ASSIGN :=
lineno:34: UNS 1
lineno:34: TO to
lineno:34: ID num
lineno:34: DO do
lineno:34: BEGIN begin
  35: write("please input number> ");read(temp); a[index-1]:=temp end;
lineno:35: WRITE write
lineno:35: LPAR (
lineno:35: STRING please input number> 
lineno:35: RPAR )
lineno:35: SEMI ;
lineno:35: READ read
lineno:35: LPAR (
lineno:35: ID temp
lineno:35: RPAR )
lineno:35: SEMI ;
lineno:35: ID a
lineno:35: LBRA [
lineno:35: ID index
lineno:35: MINUS -
lineno:35: UNS 1
lineno:35: RBRA ]
lineno:35: ASSIGN :=
lineno:35: ID temp
lineno:35: END end
lineno:35: SEMI ;
  36: 
  37: qsort(0, num-1);
lineno:37: ID qsort
lineno:37: LPAR (
lineno:37: UNS 0
lineno:37: COMMA ,
lineno:37: ID num
lineno:37: MINUS -
lineno:37: UNS 1
lineno:37: RPAR )
lineno:37: SEMI ;
  38: for index:=0 to num-1 do write(a[index]);
lineno:38: FOR for
lineno:38: ID index
lineno:38: ASSIGN :=
lineno:38: UNS 0
lineno:38: TO to
lineno:38: ID num
lineno:38: MINUS -
lineno:38: UNS 1
lineno:38: DO do
lineno:38: WRITE write
lineno:38: LPAR (
lineno:38: ID a
lineno:38: LBRA [
lineno:38: ID index
lineno:38: RBRA ]
lineno:38: RPAR )
lineno:38: SEMI ;
  39: end.
lineno:39: END end
lineno:39: DOT .
  40: 
lineno:41: ENDFILE 
